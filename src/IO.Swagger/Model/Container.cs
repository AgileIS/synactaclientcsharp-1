/* 
 * Synacta
 *
 * WebApi
 *
 * OpenAPI spec version: v1
 * Contact: bhofmann@agile-is.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Container
    /// </summary>
    [DataContract]
    public partial class Container :  IEquatable<Container>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Container" /> class.
        /// </summary>
        /// <param name="Properties">Properties.</param>
        /// <param name="PropertyInfos">PropertyInfos.</param>
        /// <param name="ID">ID.</param>
        /// <param name="ObjectType">ObjectType.</param>
        /// <param name="ParentID">ParentID.</param>
        /// <param name="ParentType">ParentType.</param>
        /// <param name="IsVirtual">IsVirtual.</param>
        /// <param name="Frozen">Frozen.</param>
        /// <param name="HasChild">HasChild.</param>
        /// <param name="CheckedOutBy">CheckedOutBy.</param>
        /// <param name="Version">Version.</param>
        /// <param name="Hash">Hash.</param>
        /// <param name="OdataContext">OdataContext.</param>
        /// <param name="OdataReadLink">OdataReadLink.</param>
        /// <param name="ChildodataNavigationLink">ChildodataNavigationLink.</param>
        /// <param name="DocumentodataNavigationLink">DocumentodataNavigationLink.</param>
        /// <param name="ParentodataNavigationLink">ParentodataNavigationLink.</param>
        /// <param name="FullODataLinkodataNavigationLink">FullODataLinkodataNavigationLink.</param>
        /// <param name="StandardODataLinkodataNavigationLink">StandardODataLinkodataNavigationLink.</param>
        /// <param name="NoneODataLinkodataNavigationLink">NoneODataLinkodataNavigationLink.</param>
        /// <param name="OdataEditLink">OdataEditLink.</param>
        /// <param name="OdataEtag">OdataEtag.</param>
        /// <param name="OdataMetadataEtag">OdataMetadataEtag.</param>
        /// <param name="OdataPicklistLink">OdataPicklistLink.</param>
        public Container(Dictionary<string, string> Properties = null, Dictionary<string, Dictionary<string, Object>> PropertyInfos = null, string ID = null, string ObjectType = null, string ParentID = null, string ParentType = null, bool? IsVirtual = null, bool? Frozen = null, bool? HasChild = null, string CheckedOutBy = null, string Version = null, string Hash = null, string OdataContext = null, string OdataReadLink = null, string ChildodataNavigationLink = null, string DocumentodataNavigationLink = null, string ParentodataNavigationLink = null, string FullODataLinkodataNavigationLink = null, string StandardODataLinkodataNavigationLink = null, string NoneODataLinkodataNavigationLink = null, string OdataEditLink = null, string OdataEtag = null, string OdataMetadataEtag = null, string OdataPicklistLink = null)
        {
            this.Properties = Properties;
            this.PropertyInfos = PropertyInfos;
            this.ID = ID;
            this.ObjectType = ObjectType;
            this.ParentID = ParentID;
            this.ParentType = ParentType;
            this.IsVirtual = IsVirtual;
            this.Frozen = Frozen;
            this.HasChild = HasChild;
            this.CheckedOutBy = CheckedOutBy;
            this.Version = Version;
            this.Hash = Hash;
            this.OdataContext = OdataContext;
            this.OdataReadLink = OdataReadLink;
            this.ChildodataNavigationLink = ChildodataNavigationLink;
            this.DocumentodataNavigationLink = DocumentodataNavigationLink;
            this.ParentodataNavigationLink = ParentodataNavigationLink;
            this.FullODataLinkodataNavigationLink = FullODataLinkodataNavigationLink;
            this.StandardODataLinkodataNavigationLink = StandardODataLinkodataNavigationLink;
            this.NoneODataLinkodataNavigationLink = NoneODataLinkodataNavigationLink;
            this.OdataEditLink = OdataEditLink;
            this.OdataEtag = OdataEtag;
            this.OdataMetadataEtag = OdataMetadataEtag;
            this.OdataPicklistLink = OdataPicklistLink;
        }
        
        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="Properties", EmitDefaultValue=false)]
        public Dictionary<string, string> Properties { get; set; }
        /// <summary>
        /// Gets or Sets PropertyInfos
        /// </summary>
        [DataMember(Name="PropertyInfos", EmitDefaultValue=false)]
        public Dictionary<string, Dictionary<string, Object>> PropertyInfos { get; set; }
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name="ObjectType", EmitDefaultValue=false)]
        public string ObjectType { get; set; }
        /// <summary>
        /// Gets or Sets ParentID
        /// </summary>
        [DataMember(Name="ParentID", EmitDefaultValue=false)]
        public string ParentID { get; set; }
        /// <summary>
        /// Gets or Sets ParentType
        /// </summary>
        [DataMember(Name="ParentType", EmitDefaultValue=false)]
        public string ParentType { get; set; }
        /// <summary>
        /// Gets or Sets IsVirtual
        /// </summary>
        [DataMember(Name="IsVirtual", EmitDefaultValue=false)]
        public bool? IsVirtual { get; set; }
        /// <summary>
        /// Gets or Sets Frozen
        /// </summary>
        [DataMember(Name="Frozen", EmitDefaultValue=false)]
        public bool? Frozen { get; set; }
        /// <summary>
        /// Gets or Sets HasChild
        /// </summary>
        [DataMember(Name="HasChild", EmitDefaultValue=false)]
        public bool? HasChild { get; set; }
        /// <summary>
        /// Gets or Sets CheckedOutBy
        /// </summary>
        [DataMember(Name="CheckedOutBy", EmitDefaultValue=false)]
        public string CheckedOutBy { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }
        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="Hash", EmitDefaultValue=false)]
        public string Hash { get; set; }
        /// <summary>
        /// Gets or Sets OdataContext
        /// </summary>
        [DataMember(Name="@odata.context", EmitDefaultValue=false)]
        public string OdataContext { get; set; }
        /// <summary>
        /// Gets or Sets OdataReadLink
        /// </summary>
        [DataMember(Name="@odata.readLink", EmitDefaultValue=false)]
        public string OdataReadLink { get; set; }
        /// <summary>
        /// Gets or Sets ChildodataNavigationLink
        /// </summary>
        [DataMember(Name="Child@odata.navigationLink", EmitDefaultValue=false)]
        public string ChildodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets DocumentodataNavigationLink
        /// </summary>
        [DataMember(Name="Document@odata.navigationLink", EmitDefaultValue=false)]
        public string DocumentodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets ParentodataNavigationLink
        /// </summary>
        [DataMember(Name="Parent@odata.navigationLink", EmitDefaultValue=false)]
        public string ParentodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets FullODataLinkodataNavigationLink
        /// </summary>
        [DataMember(Name="FullODataLink@odata.navigationLink", EmitDefaultValue=false)]
        public string FullODataLinkodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets StandardODataLinkodataNavigationLink
        /// </summary>
        [DataMember(Name="StandardODataLink@odata.navigationLink", EmitDefaultValue=false)]
        public string StandardODataLinkodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets NoneODataLinkodataNavigationLink
        /// </summary>
        [DataMember(Name="NoneODataLink@odata.navigationLink", EmitDefaultValue=false)]
        public string NoneODataLinkodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets OdataEditLink
        /// </summary>
        [DataMember(Name="@odata.editLink", EmitDefaultValue=false)]
        public string OdataEditLink { get; set; }
        /// <summary>
        /// Gets or Sets OdataEtag
        /// </summary>
        [DataMember(Name="@odata.etag", EmitDefaultValue=false)]
        public string OdataEtag { get; set; }
        /// <summary>
        /// Gets or Sets OdataMetadataEtag
        /// </summary>
        [DataMember(Name="@odata.metadataEtag", EmitDefaultValue=false)]
        public string OdataMetadataEtag { get; set; }
        /// <summary>
        /// Gets or Sets OdataPicklistLink
        /// </summary>
        [DataMember(Name="@odata.PicklistLink", EmitDefaultValue=false)]
        public string OdataPicklistLink { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Container {\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PropertyInfos: ").Append(PropertyInfos).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  ParentID: ").Append(ParentID).Append("\n");
            sb.Append("  ParentType: ").Append(ParentType).Append("\n");
            sb.Append("  IsVirtual: ").Append(IsVirtual).Append("\n");
            sb.Append("  Frozen: ").Append(Frozen).Append("\n");
            sb.Append("  HasChild: ").Append(HasChild).Append("\n");
            sb.Append("  CheckedOutBy: ").Append(CheckedOutBy).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  OdataContext: ").Append(OdataContext).Append("\n");
            sb.Append("  OdataReadLink: ").Append(OdataReadLink).Append("\n");
            sb.Append("  ChildodataNavigationLink: ").Append(ChildodataNavigationLink).Append("\n");
            sb.Append("  DocumentodataNavigationLink: ").Append(DocumentodataNavigationLink).Append("\n");
            sb.Append("  ParentodataNavigationLink: ").Append(ParentodataNavigationLink).Append("\n");
            sb.Append("  FullODataLinkodataNavigationLink: ").Append(FullODataLinkodataNavigationLink).Append("\n");
            sb.Append("  StandardODataLinkodataNavigationLink: ").Append(StandardODataLinkodataNavigationLink).Append("\n");
            sb.Append("  NoneODataLinkodataNavigationLink: ").Append(NoneODataLinkodataNavigationLink).Append("\n");
            sb.Append("  OdataEditLink: ").Append(OdataEditLink).Append("\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  OdataMetadataEtag: ").Append(OdataMetadataEtag).Append("\n");
            sb.Append("  OdataPicklistLink: ").Append(OdataPicklistLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Container);
        }

        /// <summary>
        /// Returns true if Container instances are equal
        /// </summary>
        /// <param name="other">Instance of Container to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Container other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Properties == other.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(other.Properties)
                ) && 
                (
                    this.PropertyInfos == other.PropertyInfos ||
                    this.PropertyInfos != null &&
                    this.PropertyInfos.SequenceEqual(other.PropertyInfos)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.ParentID == other.ParentID ||
                    this.ParentID != null &&
                    this.ParentID.Equals(other.ParentID)
                ) && 
                (
                    this.ParentType == other.ParentType ||
                    this.ParentType != null &&
                    this.ParentType.Equals(other.ParentType)
                ) && 
                (
                    this.IsVirtual == other.IsVirtual ||
                    this.IsVirtual != null &&
                    this.IsVirtual.Equals(other.IsVirtual)
                ) && 
                (
                    this.Frozen == other.Frozen ||
                    this.Frozen != null &&
                    this.Frozen.Equals(other.Frozen)
                ) && 
                (
                    this.HasChild == other.HasChild ||
                    this.HasChild != null &&
                    this.HasChild.Equals(other.HasChild)
                ) && 
                (
                    this.CheckedOutBy == other.CheckedOutBy ||
                    this.CheckedOutBy != null &&
                    this.CheckedOutBy.Equals(other.CheckedOutBy)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Hash == other.Hash ||
                    this.Hash != null &&
                    this.Hash.Equals(other.Hash)
                ) && 
                (
                    this.OdataContext == other.OdataContext ||
                    this.OdataContext != null &&
                    this.OdataContext.Equals(other.OdataContext)
                ) && 
                (
                    this.OdataReadLink == other.OdataReadLink ||
                    this.OdataReadLink != null &&
                    this.OdataReadLink.Equals(other.OdataReadLink)
                ) && 
                (
                    this.ChildodataNavigationLink == other.ChildodataNavigationLink ||
                    this.ChildodataNavigationLink != null &&
                    this.ChildodataNavigationLink.Equals(other.ChildodataNavigationLink)
                ) && 
                (
                    this.DocumentodataNavigationLink == other.DocumentodataNavigationLink ||
                    this.DocumentodataNavigationLink != null &&
                    this.DocumentodataNavigationLink.Equals(other.DocumentodataNavigationLink)
                ) && 
                (
                    this.ParentodataNavigationLink == other.ParentodataNavigationLink ||
                    this.ParentodataNavigationLink != null &&
                    this.ParentodataNavigationLink.Equals(other.ParentodataNavigationLink)
                ) && 
                (
                    this.FullODataLinkodataNavigationLink == other.FullODataLinkodataNavigationLink ||
                    this.FullODataLinkodataNavigationLink != null &&
                    this.FullODataLinkodataNavigationLink.Equals(other.FullODataLinkodataNavigationLink)
                ) && 
                (
                    this.StandardODataLinkodataNavigationLink == other.StandardODataLinkodataNavigationLink ||
                    this.StandardODataLinkodataNavigationLink != null &&
                    this.StandardODataLinkodataNavigationLink.Equals(other.StandardODataLinkodataNavigationLink)
                ) && 
                (
                    this.NoneODataLinkodataNavigationLink == other.NoneODataLinkodataNavigationLink ||
                    this.NoneODataLinkodataNavigationLink != null &&
                    this.NoneODataLinkodataNavigationLink.Equals(other.NoneODataLinkodataNavigationLink)
                ) && 
                (
                    this.OdataEditLink == other.OdataEditLink ||
                    this.OdataEditLink != null &&
                    this.OdataEditLink.Equals(other.OdataEditLink)
                ) && 
                (
                    this.OdataEtag == other.OdataEtag ||
                    this.OdataEtag != null &&
                    this.OdataEtag.Equals(other.OdataEtag)
                ) && 
                (
                    this.OdataMetadataEtag == other.OdataMetadataEtag ||
                    this.OdataMetadataEtag != null &&
                    this.OdataMetadataEtag.Equals(other.OdataMetadataEtag)
                ) && 
                (
                    this.OdataPicklistLink == other.OdataPicklistLink ||
                    this.OdataPicklistLink != null &&
                    this.OdataPicklistLink.Equals(other.OdataPicklistLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Properties != null)
                    hash = hash * 59 + this.Properties.GetHashCode();
                if (this.PropertyInfos != null)
                    hash = hash * 59 + this.PropertyInfos.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.ParentID != null)
                    hash = hash * 59 + this.ParentID.GetHashCode();
                if (this.ParentType != null)
                    hash = hash * 59 + this.ParentType.GetHashCode();
                if (this.IsVirtual != null)
                    hash = hash * 59 + this.IsVirtual.GetHashCode();
                if (this.Frozen != null)
                    hash = hash * 59 + this.Frozen.GetHashCode();
                if (this.HasChild != null)
                    hash = hash * 59 + this.HasChild.GetHashCode();
                if (this.CheckedOutBy != null)
                    hash = hash * 59 + this.CheckedOutBy.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.Hash != null)
                    hash = hash * 59 + this.Hash.GetHashCode();
                if (this.OdataContext != null)
                    hash = hash * 59 + this.OdataContext.GetHashCode();
                if (this.OdataReadLink != null)
                    hash = hash * 59 + this.OdataReadLink.GetHashCode();
                if (this.ChildodataNavigationLink != null)
                    hash = hash * 59 + this.ChildodataNavigationLink.GetHashCode();
                if (this.DocumentodataNavigationLink != null)
                    hash = hash * 59 + this.DocumentodataNavigationLink.GetHashCode();
                if (this.ParentodataNavigationLink != null)
                    hash = hash * 59 + this.ParentodataNavigationLink.GetHashCode();
                if (this.FullODataLinkodataNavigationLink != null)
                    hash = hash * 59 + this.FullODataLinkodataNavigationLink.GetHashCode();
                if (this.StandardODataLinkodataNavigationLink != null)
                    hash = hash * 59 + this.StandardODataLinkodataNavigationLink.GetHashCode();
                if (this.NoneODataLinkodataNavigationLink != null)
                    hash = hash * 59 + this.NoneODataLinkodataNavigationLink.GetHashCode();
                if (this.OdataEditLink != null)
                    hash = hash * 59 + this.OdataEditLink.GetHashCode();
                if (this.OdataEtag != null)
                    hash = hash * 59 + this.OdataEtag.GetHashCode();
                if (this.OdataMetadataEtag != null)
                    hash = hash * 59 + this.OdataMetadataEtag.GetHashCode();
                if (this.OdataPicklistLink != null)
                    hash = hash * 59 + this.OdataPicklistLink.GetHashCode();
                return hash;
            }
        }
    }

}
