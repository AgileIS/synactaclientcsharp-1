/* 
 * Synacta
 *
 * WebApi
 *
 * OpenAPI spec version: v1
 * Contact: bhofmann@agile-is.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RecycleBinEntry
    /// </summary>
    [DataContract]
    public partial class RecycleBinEntry :  IEquatable<RecycleBinEntry>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecycleBinEntry" /> class.
        /// </summary>
        /// <param name="Properties">Properties.</param>
        /// <param name="PropertyInfos">PropertyInfos.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DeletedBy">DeletedBy.</param>
        /// <param name="DeletedDate">DeletedDate.</param>
        /// <param name="RecycleID">RecycleID.</param>
        /// <param name="ID">ID.</param>
        /// <param name="Type">Type.</param>
        /// <param name="ParentId">ParentId.</param>
        /// <param name="ParentType">ParentType.</param>
        /// <param name="ParentName">ParentName.</param>
        /// <param name="Organisation">Organisation.</param>
        /// <param name="OdataContext">OdataContext.</param>
        /// <param name="OdataReadLink">OdataReadLink.</param>
        /// <param name="RestoreodataNavigationLink">RestoreodataNavigationLink.</param>
        /// <param name="FullODataLinkodataNavigationLink">FullODataLinkodataNavigationLink.</param>
        /// <param name="StandardODataLinkodataNavigationLink">StandardODataLinkodataNavigationLink.</param>
        /// <param name="NoneODataLinkodataNavigationLink">NoneODataLinkodataNavigationLink.</param>
        public RecycleBinEntry(Dictionary<string, string> Properties = null, Dictionary<string, Dictionary<string, Object>> PropertyInfos = null, string Name = null, string Description = null, string DeletedBy = null, DateTime? DeletedDate = null, string RecycleID = null, string ID = null, string Type = null, string ParentId = null, string ParentType = null, string ParentName = null, string Organisation = null, string OdataContext = null, string OdataReadLink = null, string RestoreodataNavigationLink = null, string FullODataLinkodataNavigationLink = null, string StandardODataLinkodataNavigationLink = null, string NoneODataLinkodataNavigationLink = null)
        {
            this.Properties = Properties;
            this.PropertyInfos = PropertyInfos;
            this.Name = Name;
            this.Description = Description;
            this.DeletedBy = DeletedBy;
            this.DeletedDate = DeletedDate;
            this.RecycleID = RecycleID;
            this.ID = ID;
            this.Type = Type;
            this.ParentId = ParentId;
            this.ParentType = ParentType;
            this.ParentName = ParentName;
            this.Organisation = Organisation;
            this.OdataContext = OdataContext;
            this.OdataReadLink = OdataReadLink;
            this.RestoreodataNavigationLink = RestoreodataNavigationLink;
            this.FullODataLinkodataNavigationLink = FullODataLinkodataNavigationLink;
            this.StandardODataLinkodataNavigationLink = StandardODataLinkodataNavigationLink;
            this.NoneODataLinkodataNavigationLink = NoneODataLinkodataNavigationLink;
        }
        
        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="Properties", EmitDefaultValue=false)]
        public Dictionary<string, string> Properties { get; set; }
        /// <summary>
        /// Gets or Sets PropertyInfos
        /// </summary>
        [DataMember(Name="PropertyInfos", EmitDefaultValue=false)]
        public Dictionary<string, Dictionary<string, Object>> PropertyInfos { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="DeletedBy", EmitDefaultValue=false)]
        public string DeletedBy { get; set; }
        /// <summary>
        /// Gets or Sets DeletedDate
        /// </summary>
        [DataMember(Name="DeletedDate", EmitDefaultValue=false)]
        public DateTime? DeletedDate { get; set; }
        /// <summary>
        /// Gets or Sets RecycleID
        /// </summary>
        [DataMember(Name="RecycleID", EmitDefaultValue=false)]
        public string RecycleID { get; set; }
        /// <summary>
        /// Gets or Sets ID
        /// </summary>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="ParentId", EmitDefaultValue=false)]
        public string ParentId { get; set; }
        /// <summary>
        /// Gets or Sets ParentType
        /// </summary>
        [DataMember(Name="ParentType", EmitDefaultValue=false)]
        public string ParentType { get; set; }
        /// <summary>
        /// Gets or Sets ParentName
        /// </summary>
        [DataMember(Name="ParentName", EmitDefaultValue=false)]
        public string ParentName { get; set; }
        /// <summary>
        /// Gets or Sets Organisation
        /// </summary>
        [DataMember(Name="Organisation", EmitDefaultValue=false)]
        public string Organisation { get; set; }
        /// <summary>
        /// Gets or Sets OdataContext
        /// </summary>
        [DataMember(Name="@odata.context", EmitDefaultValue=false)]
        public string OdataContext { get; set; }
        /// <summary>
        /// Gets or Sets OdataReadLink
        /// </summary>
        [DataMember(Name="@odata.readLink", EmitDefaultValue=false)]
        public string OdataReadLink { get; set; }
        /// <summary>
        /// Gets or Sets RestoreodataNavigationLink
        /// </summary>
        [DataMember(Name="Restore@odata.navigationLink", EmitDefaultValue=false)]
        public string RestoreodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets FullODataLinkodataNavigationLink
        /// </summary>
        [DataMember(Name="FullODataLink@odata.navigationLink", EmitDefaultValue=false)]
        public string FullODataLinkodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets StandardODataLinkodataNavigationLink
        /// </summary>
        [DataMember(Name="StandardODataLink@odata.navigationLink", EmitDefaultValue=false)]
        public string StandardODataLinkodataNavigationLink { get; set; }
        /// <summary>
        /// Gets or Sets NoneODataLinkodataNavigationLink
        /// </summary>
        [DataMember(Name="NoneODataLink@odata.navigationLink", EmitDefaultValue=false)]
        public string NoneODataLinkodataNavigationLink { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecycleBinEntry {\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  PropertyInfos: ").Append(PropertyInfos).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeletedDate: ").Append(DeletedDate).Append("\n");
            sb.Append("  RecycleID: ").Append(RecycleID).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentType: ").Append(ParentType).Append("\n");
            sb.Append("  ParentName: ").Append(ParentName).Append("\n");
            sb.Append("  Organisation: ").Append(Organisation).Append("\n");
            sb.Append("  OdataContext: ").Append(OdataContext).Append("\n");
            sb.Append("  OdataReadLink: ").Append(OdataReadLink).Append("\n");
            sb.Append("  RestoreodataNavigationLink: ").Append(RestoreodataNavigationLink).Append("\n");
            sb.Append("  FullODataLinkodataNavigationLink: ").Append(FullODataLinkodataNavigationLink).Append("\n");
            sb.Append("  StandardODataLinkodataNavigationLink: ").Append(StandardODataLinkodataNavigationLink).Append("\n");
            sb.Append("  NoneODataLinkodataNavigationLink: ").Append(NoneODataLinkodataNavigationLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RecycleBinEntry);
        }

        /// <summary>
        /// Returns true if RecycleBinEntry instances are equal
        /// </summary>
        /// <param name="other">Instance of RecycleBinEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecycleBinEntry other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Properties == other.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(other.Properties)
                ) && 
                (
                    this.PropertyInfos == other.PropertyInfos ||
                    this.PropertyInfos != null &&
                    this.PropertyInfos.SequenceEqual(other.PropertyInfos)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DeletedBy == other.DeletedBy ||
                    this.DeletedBy != null &&
                    this.DeletedBy.Equals(other.DeletedBy)
                ) && 
                (
                    this.DeletedDate == other.DeletedDate ||
                    this.DeletedDate != null &&
                    this.DeletedDate.Equals(other.DeletedDate)
                ) && 
                (
                    this.RecycleID == other.RecycleID ||
                    this.RecycleID != null &&
                    this.RecycleID.Equals(other.RecycleID)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                ) && 
                (
                    this.ParentType == other.ParentType ||
                    this.ParentType != null &&
                    this.ParentType.Equals(other.ParentType)
                ) && 
                (
                    this.ParentName == other.ParentName ||
                    this.ParentName != null &&
                    this.ParentName.Equals(other.ParentName)
                ) && 
                (
                    this.Organisation == other.Organisation ||
                    this.Organisation != null &&
                    this.Organisation.Equals(other.Organisation)
                ) && 
                (
                    this.OdataContext == other.OdataContext ||
                    this.OdataContext != null &&
                    this.OdataContext.Equals(other.OdataContext)
                ) && 
                (
                    this.OdataReadLink == other.OdataReadLink ||
                    this.OdataReadLink != null &&
                    this.OdataReadLink.Equals(other.OdataReadLink)
                ) && 
                (
                    this.RestoreodataNavigationLink == other.RestoreodataNavigationLink ||
                    this.RestoreodataNavigationLink != null &&
                    this.RestoreodataNavigationLink.Equals(other.RestoreodataNavigationLink)
                ) && 
                (
                    this.FullODataLinkodataNavigationLink == other.FullODataLinkodataNavigationLink ||
                    this.FullODataLinkodataNavigationLink != null &&
                    this.FullODataLinkodataNavigationLink.Equals(other.FullODataLinkodataNavigationLink)
                ) && 
                (
                    this.StandardODataLinkodataNavigationLink == other.StandardODataLinkodataNavigationLink ||
                    this.StandardODataLinkodataNavigationLink != null &&
                    this.StandardODataLinkodataNavigationLink.Equals(other.StandardODataLinkodataNavigationLink)
                ) && 
                (
                    this.NoneODataLinkodataNavigationLink == other.NoneODataLinkodataNavigationLink ||
                    this.NoneODataLinkodataNavigationLink != null &&
                    this.NoneODataLinkodataNavigationLink.Equals(other.NoneODataLinkodataNavigationLink)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Properties != null)
                    hash = hash * 59 + this.Properties.GetHashCode();
                if (this.PropertyInfos != null)
                    hash = hash * 59 + this.PropertyInfos.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DeletedBy != null)
                    hash = hash * 59 + this.DeletedBy.GetHashCode();
                if (this.DeletedDate != null)
                    hash = hash * 59 + this.DeletedDate.GetHashCode();
                if (this.RecycleID != null)
                    hash = hash * 59 + this.RecycleID.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                if (this.ParentType != null)
                    hash = hash * 59 + this.ParentType.GetHashCode();
                if (this.ParentName != null)
                    hash = hash * 59 + this.ParentName.GetHashCode();
                if (this.Organisation != null)
                    hash = hash * 59 + this.Organisation.GetHashCode();
                if (this.OdataContext != null)
                    hash = hash * 59 + this.OdataContext.GetHashCode();
                if (this.OdataReadLink != null)
                    hash = hash * 59 + this.OdataReadLink.GetHashCode();
                if (this.RestoreodataNavigationLink != null)
                    hash = hash * 59 + this.RestoreodataNavigationLink.GetHashCode();
                if (this.FullODataLinkodataNavigationLink != null)
                    hash = hash * 59 + this.FullODataLinkodataNavigationLink.GetHashCode();
                if (this.StandardODataLinkodataNavigationLink != null)
                    hash = hash * 59 + this.StandardODataLinkodataNavigationLink.GetHashCode();
                if (this.NoneODataLinkodataNavigationLink != null)
                    hash = hash * 59 + this.NoneODataLinkodataNavigationLink.GetHashCode();
                return hash;
            }
        }
    }

}
