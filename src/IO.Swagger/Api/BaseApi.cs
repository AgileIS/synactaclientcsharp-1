/* 
 * Synacta
 *
 * WebApi
 *
 * OpenAPI spec version: v1
 * Contact: bhofmann@agile-is.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBaseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the empty container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="newContainerType">New type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Container</returns>
        Container ApiBaseByTypeByIdAddByNewContainerTypeGet (string type, string id, string newContainerType, string authorization);

        /// <summary>
        /// Gets the empty container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="newContainerType">New type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiBaseByTypeByIdAddByNewContainerTypeGetWithHttpInfo (string type, string id, string newContainerType, string authorization);
        /// <summary>
        /// Saves the new container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Container</returns>
        Container ApiBaseByTypeByIdAddPut (string type, string id, string authorization, Container newContainer = null);

        /// <summary>
        /// Saves the new container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiBaseByTypeByIdAddPutWithHttpInfo (string type, string id, string authorization, Container newContainer = null);
        /// <summary>
        /// Checkins the specified .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Container</returns>
        Container ApiBaseByTypeByIdCheckinPut (string type, string id, string authorization, Container container = null);

        /// <summary>
        /// Checkins the specified .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiBaseByTypeByIdCheckinPutWithHttpInfo (string type, string id, string authorization, Container container = null);
        /// <summary>
        /// Checkouts the specified .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Container</returns>
        Container ApiBaseByTypeByIdCheckoutPut (string type, string id, string authorization, Container container = null);

        /// <summary>
        /// Checkouts the specified .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiBaseByTypeByIdCheckoutPutWithHttpInfo (string type, string id, string authorization, Container container = null);
        /// <summary>
        /// Gets the children of container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        List<Container> ApiBaseByTypeByIdChildrenGet (string type, string id, string authorization);

        /// <summary>
        /// Gets the children of container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        ApiResponse<List<Container>> ApiBaseByTypeByIdChildrenGetWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the container types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApiBaseByTypeByIdChildrenTypesGet (string type, string id, string authorization);

        /// <summary>
        /// Gets the container types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApiBaseByTypeByIdChildrenTypesGetWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Deletes the container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>bool?</returns>
        bool? ApiBaseByTypeByIdDelete (string type, string id, string authorization);

        /// <summary>
        /// Deletes the container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiBaseByTypeByIdDeleteWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        List<Container> ApiBaseByTypeByIdDocumentsGet (string type, string id, string authorization);

        /// <summary>
        /// Gets the documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        ApiResponse<List<Container>> ApiBaseByTypeByIdDocumentsGetWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the documents types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApiBaseByTypeByIdDocumentsTypesGet (string type, string id, string authorization);

        /// <summary>
        /// Gets the documents types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApiBaseByTypeByIdDocumentsTypesGetWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the container by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifer.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Container</returns>
        Container ApiBaseByTypeByIdGet (string type, string id, string authorization);

        /// <summary>
        /// Gets the container by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifer.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiBaseByTypeByIdGetWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns></returns>
        void ApiBaseByTypeByIdGetFileGet (string type, string id, string authorization);

        /// <summary>
        /// Gets the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBaseByTypeByIdGetFileGetWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the lookup list entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="lookupListName">Name of the lookup list.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;KeyValuePairStringString&gt;</returns>
        List<KeyValuePairStringString> ApiBaseByTypeByIdLookupListByLookupListNameGet (string type, string id, string lookupListName, string authorization);

        /// <summary>
        /// Gets the lookup list entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="lookupListName">Name of the lookup list.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;KeyValuePairStringString&gt;</returns>
        ApiResponse<List<KeyValuePairStringString>> ApiBaseByTypeByIdLookupListByLookupListNameGetWithHttpInfo (string type, string id, string lookupListName, string authorization);
        /// <summary>
        /// Moves the object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Container</returns>
        Container ApiBaseByTypeByIdMovePost (string type, string id, string authorization, Container container = null);

        /// <summary>
        /// Moves the object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiBaseByTypeByIdMovePostWithHttpInfo (string type, string id, string authorization, Container container = null);
        /// <summary>
        /// Updates the container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Container</returns>
        Container ApiBaseByTypeByIdPost (string type, string id, string authorization, Container newContainer = null);

        /// <summary>
        /// Updates the container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiBaseByTypeByIdPostWithHttpInfo (string type, string id, string authorization, Container newContainer = null);
        /// <summary>
        /// Uploads the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns></returns>
        void ApiBaseByTypeByIdUploadFilePost (string type, string id, string authorization);

        /// <summary>
        /// Uploads the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBaseByTypeByIdUploadFilePostWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the version by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>DocumentVersion</returns>
        DocumentVersion ApiBaseByTypeByIdVersionsByVersionIdGet (string type, string id, string versionId, string authorization);

        /// <summary>
        /// Gets the version by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of DocumentVersion</returns>
        ApiResponse<DocumentVersion> ApiBaseByTypeByIdVersionsByVersionIdGetWithHttpInfo (string type, string id, string versionId, string authorization);
        /// <summary>
        /// Gets the file for version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns></returns>
        void ApiBaseByTypeByIdVersionsByVersionIdGetFileGet (string type, string id, string versionId, string authorization);

        /// <summary>
        /// Gets the file for version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBaseByTypeByIdVersionsByVersionIdGetFileGetWithHttpInfo (string type, string id, string versionId, string authorization);
        /// <summary>
        /// Restores the version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Container</returns>
        Container ApiBaseByTypeByIdVersionsByVersionIdRestorePost (string type, string id, string versionId, string authorization);

        /// <summary>
        /// Restores the version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiBaseByTypeByIdVersionsByVersionIdRestorePostWithHttpInfo (string type, string id, string versionId, string authorization);
        /// <summary>
        /// Gets the versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;DocumentVersion&gt;</returns>
        List<DocumentVersion> ApiBaseByTypeByIdVersionsGet (string type, string id, string authorization);

        /// <summary>
        /// Gets the versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;DocumentVersion&gt;</returns>
        ApiResponse<List<DocumentVersion>> ApiBaseByTypeByIdVersionsGetWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets containers by a type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        List<Container> ApiBaseByTypeGet (string type, string authorization);

        /// <summary>
        /// Gets containers by a type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        ApiResponse<List<Container>> ApiBaseByTypeGetWithHttpInfo (string type, string authorization);
        /// <summary>
        /// Gets the root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        List<Container> ApiBaseRootGet (string authorization);

        /// <summary>
        /// Gets the root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        ApiResponse<List<Container>> ApiBaseRootGetWithHttpInfo (string authorization);
        /// <summary>
        /// Gets the container types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ApiBaseTypesGet (string authorization);

        /// <summary>
        /// Gets the container types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ApiBaseTypesGetWithHttpInfo (string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the empty container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="newContainerType">New type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdAddByNewContainerTypeGetAsync (string type, string id, string newContainerType, string authorization);

        /// <summary>
        /// Gets the empty container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="newContainerType">New type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdAddByNewContainerTypeGetAsyncWithHttpInfo (string type, string id, string newContainerType, string authorization);
        /// <summary>
        /// Saves the new container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdAddPutAsync (string type, string id, string authorization, Container newContainer = null);

        /// <summary>
        /// Saves the new container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdAddPutAsyncWithHttpInfo (string type, string id, string authorization, Container newContainer = null);
        /// <summary>
        /// Checkins the specified .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdCheckinPutAsync (string type, string id, string authorization, Container container = null);

        /// <summary>
        /// Checkins the specified .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdCheckinPutAsyncWithHttpInfo (string type, string id, string authorization, Container container = null);
        /// <summary>
        /// Checkouts the specified .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdCheckoutPutAsync (string type, string id, string authorization, Container container = null);

        /// <summary>
        /// Checkouts the specified .
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdCheckoutPutAsyncWithHttpInfo (string type, string id, string authorization, Container container = null);
        /// <summary>
        /// Gets the children of container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        System.Threading.Tasks.Task<List<Container>> ApiBaseByTypeByIdChildrenGetAsync (string type, string id, string authorization);

        /// <summary>
        /// Gets the children of container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiBaseByTypeByIdChildrenGetAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the container types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApiBaseByTypeByIdChildrenTypesGetAsync (string type, string id, string authorization);

        /// <summary>
        /// Gets the container types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiBaseByTypeByIdChildrenTypesGetAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Deletes the container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiBaseByTypeByIdDeleteAsync (string type, string id, string authorization);

        /// <summary>
        /// Deletes the container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiBaseByTypeByIdDeleteAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        System.Threading.Tasks.Task<List<Container>> ApiBaseByTypeByIdDocumentsGetAsync (string type, string id, string authorization);

        /// <summary>
        /// Gets the documents.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiBaseByTypeByIdDocumentsGetAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the documents types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApiBaseByTypeByIdDocumentsTypesGetAsync (string type, string id, string authorization);

        /// <summary>
        /// Gets the documents types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiBaseByTypeByIdDocumentsTypesGetAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the container by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifer.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdGetAsync (string type, string id, string authorization);

        /// <summary>
        /// Gets the container by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifer.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdGetAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBaseByTypeByIdGetFileGetAsync (string type, string id, string authorization);

        /// <summary>
        /// Gets the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBaseByTypeByIdGetFileGetAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the lookup list entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="lookupListName">Name of the lookup list.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;KeyValuePairStringString&gt;</returns>
        System.Threading.Tasks.Task<List<KeyValuePairStringString>> ApiBaseByTypeByIdLookupListByLookupListNameGetAsync (string type, string id, string lookupListName, string authorization);

        /// <summary>
        /// Gets the lookup list entries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="lookupListName">Name of the lookup list.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;KeyValuePairStringString&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<KeyValuePairStringString>>> ApiBaseByTypeByIdLookupListByLookupListNameGetAsyncWithHttpInfo (string type, string id, string lookupListName, string authorization);
        /// <summary>
        /// Moves the object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdMovePostAsync (string type, string id, string authorization, Container container = null);

        /// <summary>
        /// Moves the object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdMovePostAsyncWithHttpInfo (string type, string id, string authorization, Container container = null);
        /// <summary>
        /// Updates the container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdPostAsync (string type, string id, string authorization, Container newContainer = null);

        /// <summary>
        /// Updates the container.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdPostAsyncWithHttpInfo (string type, string id, string authorization, Container newContainer = null);
        /// <summary>
        /// Uploads the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBaseByTypeByIdUploadFilePostAsync (string type, string id, string authorization);

        /// <summary>
        /// Uploads the file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBaseByTypeByIdUploadFilePostAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets the version by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of DocumentVersion</returns>
        System.Threading.Tasks.Task<DocumentVersion> ApiBaseByTypeByIdVersionsByVersionIdGetAsync (string type, string id, string versionId, string authorization);

        /// <summary>
        /// Gets the version by identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (DocumentVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentVersion>> ApiBaseByTypeByIdVersionsByVersionIdGetAsyncWithHttpInfo (string type, string id, string versionId, string authorization);
        /// <summary>
        /// Gets the file for version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBaseByTypeByIdVersionsByVersionIdGetFileGetAsync (string type, string id, string versionId, string authorization);

        /// <summary>
        /// Gets the file for version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBaseByTypeByIdVersionsByVersionIdGetFileGetAsyncWithHttpInfo (string type, string id, string versionId, string authorization);
        /// <summary>
        /// Restores the version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdVersionsByVersionIdRestorePostAsync (string type, string id, string versionId, string authorization);

        /// <summary>
        /// Restores the version.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdVersionsByVersionIdRestorePostAsyncWithHttpInfo (string type, string id, string versionId, string authorization);
        /// <summary>
        /// Gets the versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;DocumentVersion&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentVersion>> ApiBaseByTypeByIdVersionsGetAsync (string type, string id, string authorization);

        /// <summary>
        /// Gets the versions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentVersion&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentVersion>>> ApiBaseByTypeByIdVersionsGetAsyncWithHttpInfo (string type, string id, string authorization);
        /// <summary>
        /// Gets containers by a type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        System.Threading.Tasks.Task<List<Container>> ApiBaseByTypeGetAsync (string type, string authorization);

        /// <summary>
        /// Gets containers by a type.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiBaseByTypeGetAsyncWithHttpInfo (string type, string authorization);
        /// <summary>
        /// Gets the root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        System.Threading.Tasks.Task<List<Container>> ApiBaseRootGetAsync (string authorization);

        /// <summary>
        /// Gets the root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiBaseRootGetAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Gets the container types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ApiBaseTypesGetAsync (string authorization);

        /// <summary>
        /// Gets the container types.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiBaseTypesGetAsyncWithHttpInfo (string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BaseApi : IBaseApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BaseApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BaseApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the empty container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="newContainerType">New type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Container</returns>
        public Container ApiBaseByTypeByIdAddByNewContainerTypeGet (string type, string id, string newContainerType, string authorization)
        {
             ApiResponse<Container> localVarResponse = ApiBaseByTypeByIdAddByNewContainerTypeGetWithHttpInfo(type, id, newContainerType, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the empty container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="newContainerType">New type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiBaseByTypeByIdAddByNewContainerTypeGetWithHttpInfo (string type, string id, string newContainerType, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdAddByNewContainerTypeGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdAddByNewContainerTypeGet");
            // verify the required parameter 'newContainerType' is set
            if (newContainerType == null)
                throw new ApiException(400, "Missing required parameter 'newContainerType' when calling BaseApi->ApiBaseByTypeByIdAddByNewContainerTypeGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdAddByNewContainerTypeGet");

            var localVarPath = "/_api/base/{type}/{id}/Add/{newContainerType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (newContainerType != null) localVarPathParams.Add("newContainerType", Configuration.ApiClient.ParameterToString(newContainerType)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdAddByNewContainerTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Gets the empty container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="newContainerType">New type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdAddByNewContainerTypeGetAsync (string type, string id, string newContainerType, string authorization)
        {
             ApiResponse<Container> localVarResponse = await ApiBaseByTypeByIdAddByNewContainerTypeGetAsyncWithHttpInfo(type, id, newContainerType, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the empty container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="newContainerType">New type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdAddByNewContainerTypeGetAsyncWithHttpInfo (string type, string id, string newContainerType, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdAddByNewContainerTypeGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdAddByNewContainerTypeGet");
            // verify the required parameter 'newContainerType' is set
            if (newContainerType == null)
                throw new ApiException(400, "Missing required parameter 'newContainerType' when calling BaseApi->ApiBaseByTypeByIdAddByNewContainerTypeGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdAddByNewContainerTypeGet");

            var localVarPath = "/_api/base/{type}/{id}/Add/{newContainerType}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (newContainerType != null) localVarPathParams.Add("newContainerType", Configuration.ApiClient.ParameterToString(newContainerType)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdAddByNewContainerTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Saves the new container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Container</returns>
        public Container ApiBaseByTypeByIdAddPut (string type, string id, string authorization, Container newContainer = null)
        {
             ApiResponse<Container> localVarResponse = ApiBaseByTypeByIdAddPutWithHttpInfo(type, id, authorization, newContainer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves the new container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiBaseByTypeByIdAddPutWithHttpInfo (string type, string id, string authorization, Container newContainer = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdAddPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdAddPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdAddPut");

            var localVarPath = "/_api/base/{type}/{id}/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (newContainer != null && newContainer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newContainer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newContainer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Saves the new container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdAddPutAsync (string type, string id, string authorization, Container newContainer = null)
        {
             ApiResponse<Container> localVarResponse = await ApiBaseByTypeByIdAddPutAsyncWithHttpInfo(type, id, authorization, newContainer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves the new container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdAddPutAsyncWithHttpInfo (string type, string id, string authorization, Container newContainer = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdAddPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdAddPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdAddPut");

            var localVarPath = "/_api/base/{type}/{id}/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (newContainer != null && newContainer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newContainer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newContainer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Checkins the specified . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Container</returns>
        public Container ApiBaseByTypeByIdCheckinPut (string type, string id, string authorization, Container container = null)
        {
             ApiResponse<Container> localVarResponse = ApiBaseByTypeByIdCheckinPutWithHttpInfo(type, id, authorization, container);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Checkins the specified . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiBaseByTypeByIdCheckinPutWithHttpInfo (string type, string id, string authorization, Container container = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdCheckinPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdCheckinPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdCheckinPut");

            var localVarPath = "/_api/base/{type}/{id}/Checkin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (container != null && container.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(container); // http body (model) parameter
            }
            else
            {
                localVarPostBody = container; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdCheckinPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Checkins the specified . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdCheckinPutAsync (string type, string id, string authorization, Container container = null)
        {
             ApiResponse<Container> localVarResponse = await ApiBaseByTypeByIdCheckinPutAsyncWithHttpInfo(type, id, authorization, container);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Checkins the specified . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdCheckinPutAsyncWithHttpInfo (string type, string id, string authorization, Container container = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdCheckinPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdCheckinPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdCheckinPut");

            var localVarPath = "/_api/base/{type}/{id}/Checkin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (container != null && container.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(container); // http body (model) parameter
            }
            else
            {
                localVarPostBody = container; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdCheckinPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Checkouts the specified . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Container</returns>
        public Container ApiBaseByTypeByIdCheckoutPut (string type, string id, string authorization, Container container = null)
        {
             ApiResponse<Container> localVarResponse = ApiBaseByTypeByIdCheckoutPutWithHttpInfo(type, id, authorization, container);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Checkouts the specified . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiBaseByTypeByIdCheckoutPutWithHttpInfo (string type, string id, string authorization, Container container = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdCheckoutPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdCheckoutPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdCheckoutPut");

            var localVarPath = "/_api/base/{type}/{id}/Checkout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (container != null && container.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(container); // http body (model) parameter
            }
            else
            {
                localVarPostBody = container; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdCheckoutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Checkouts the specified . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdCheckoutPutAsync (string type, string id, string authorization, Container container = null)
        {
             ApiResponse<Container> localVarResponse = await ApiBaseByTypeByIdCheckoutPutAsyncWithHttpInfo(type, id, authorization, container);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Checkouts the specified . 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdCheckoutPutAsyncWithHttpInfo (string type, string id, string authorization, Container container = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdCheckoutPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdCheckoutPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdCheckoutPut");

            var localVarPath = "/_api/base/{type}/{id}/Checkout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (container != null && container.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(container); // http body (model) parameter
            }
            else
            {
                localVarPostBody = container; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdCheckoutPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Gets the children of container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        public List<Container> ApiBaseByTypeByIdChildrenGet (string type, string id, string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = ApiBaseByTypeByIdChildrenGetWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the children of container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        public ApiResponse< List<Container> > ApiBaseByTypeByIdChildrenGetWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdChildrenGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdChildrenGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdChildrenGet");

            var localVarPath = "/_api/base/{type}/{id}/Children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdChildrenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets the children of container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        public async System.Threading.Tasks.Task<List<Container>> ApiBaseByTypeByIdChildrenGetAsync (string type, string id, string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = await ApiBaseByTypeByIdChildrenGetAsyncWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the children of container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiBaseByTypeByIdChildrenGetAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdChildrenGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdChildrenGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdChildrenGet");

            var localVarPath = "/_api/base/{type}/{id}/Children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdChildrenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets the container types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApiBaseByTypeByIdChildrenTypesGet (string type, string id, string authorization)
        {
             ApiResponse<List<string>> localVarResponse = ApiBaseByTypeByIdChildrenTypesGetWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the container types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > ApiBaseByTypeByIdChildrenTypesGetWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdChildrenTypesGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdChildrenTypesGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdChildrenTypesGet");

            var localVarPath = "/_api/base/{type}/{id}/Children/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdChildrenTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Gets the container types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApiBaseByTypeByIdChildrenTypesGetAsync (string type, string id, string authorization)
        {
             ApiResponse<List<string>> localVarResponse = await ApiBaseByTypeByIdChildrenTypesGetAsyncWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the container types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiBaseByTypeByIdChildrenTypesGetAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdChildrenTypesGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdChildrenTypesGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdChildrenTypesGet");

            var localVarPath = "/_api/base/{type}/{id}/Children/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdChildrenTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Deletes the container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>bool?</returns>
        public bool? ApiBaseByTypeByIdDelete (string type, string id, string authorization)
        {
             ApiResponse<bool?> localVarResponse = ApiBaseByTypeByIdDeleteWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiBaseByTypeByIdDeleteWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdDelete");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdDelete");

            var localVarPath = "/_api/base/{type}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Deletes the container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiBaseByTypeByIdDeleteAsync (string type, string id, string authorization)
        {
             ApiResponse<bool?> localVarResponse = await ApiBaseByTypeByIdDeleteAsyncWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiBaseByTypeByIdDeleteAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdDelete");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdDelete");

            var localVarPath = "/_api/base/{type}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Gets the documents. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        public List<Container> ApiBaseByTypeByIdDocumentsGet (string type, string id, string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = ApiBaseByTypeByIdDocumentsGetWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the documents. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        public ApiResponse< List<Container> > ApiBaseByTypeByIdDocumentsGetWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdDocumentsGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdDocumentsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdDocumentsGet");

            var localVarPath = "/_api/base/{type}/{id}/Documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdDocumentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets the documents. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        public async System.Threading.Tasks.Task<List<Container>> ApiBaseByTypeByIdDocumentsGetAsync (string type, string id, string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = await ApiBaseByTypeByIdDocumentsGetAsyncWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the documents. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiBaseByTypeByIdDocumentsGetAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdDocumentsGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdDocumentsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdDocumentsGet");

            var localVarPath = "/_api/base/{type}/{id}/Documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdDocumentsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets the documents types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApiBaseByTypeByIdDocumentsTypesGet (string type, string id, string authorization)
        {
             ApiResponse<List<string>> localVarResponse = ApiBaseByTypeByIdDocumentsTypesGetWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the documents types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > ApiBaseByTypeByIdDocumentsTypesGetWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdDocumentsTypesGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdDocumentsTypesGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdDocumentsTypesGet");

            var localVarPath = "/_api/base/{type}/{id}/Documents/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdDocumentsTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Gets the documents types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApiBaseByTypeByIdDocumentsTypesGetAsync (string type, string id, string authorization)
        {
             ApiResponse<List<string>> localVarResponse = await ApiBaseByTypeByIdDocumentsTypesGetAsyncWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the documents types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiBaseByTypeByIdDocumentsTypesGetAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdDocumentsTypesGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdDocumentsTypesGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdDocumentsTypesGet");

            var localVarPath = "/_api/base/{type}/{id}/Documents/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdDocumentsTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Gets the container by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifer.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Container</returns>
        public Container ApiBaseByTypeByIdGet (string type, string id, string authorization)
        {
             ApiResponse<Container> localVarResponse = ApiBaseByTypeByIdGetWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the container by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifer.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiBaseByTypeByIdGetWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdGet");

            var localVarPath = "/_api/base/{type}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Gets the container by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifer.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdGetAsync (string type, string id, string authorization)
        {
             ApiResponse<Container> localVarResponse = await ApiBaseByTypeByIdGetAsyncWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the container by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifer.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdGetAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdGet");

            var localVarPath = "/_api/base/{type}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Gets the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns></returns>
        public void ApiBaseByTypeByIdGetFileGet (string type, string id, string authorization)
        {
             ApiBaseByTypeByIdGetFileGetWithHttpInfo(type, id, authorization);
        }

        /// <summary>
        /// Gets the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiBaseByTypeByIdGetFileGetWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdGetFileGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdGetFileGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdGetFileGet");

            var localVarPath = "/_api/base/{type}/{id}/GetFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdGetFileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBaseByTypeByIdGetFileGetAsync (string type, string id, string authorization)
        {
             await ApiBaseByTypeByIdGetFileGetAsyncWithHttpInfo(type, id, authorization);

        }

        /// <summary>
        /// Gets the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiBaseByTypeByIdGetFileGetAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdGetFileGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdGetFileGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdGetFileGet");

            var localVarPath = "/_api/base/{type}/{id}/GetFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdGetFileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the lookup list entries. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="lookupListName">Name of the lookup list.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;KeyValuePairStringString&gt;</returns>
        public List<KeyValuePairStringString> ApiBaseByTypeByIdLookupListByLookupListNameGet (string type, string id, string lookupListName, string authorization)
        {
             ApiResponse<List<KeyValuePairStringString>> localVarResponse = ApiBaseByTypeByIdLookupListByLookupListNameGetWithHttpInfo(type, id, lookupListName, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the lookup list entries. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="lookupListName">Name of the lookup list.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;KeyValuePairStringString&gt;</returns>
        public ApiResponse< List<KeyValuePairStringString> > ApiBaseByTypeByIdLookupListByLookupListNameGetWithHttpInfo (string type, string id, string lookupListName, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdLookupListByLookupListNameGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdLookupListByLookupListNameGet");
            // verify the required parameter 'lookupListName' is set
            if (lookupListName == null)
                throw new ApiException(400, "Missing required parameter 'lookupListName' when calling BaseApi->ApiBaseByTypeByIdLookupListByLookupListNameGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdLookupListByLookupListNameGet");

            var localVarPath = "/_api/base/{type}/{id}/LookupList/{lookupListName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lookupListName != null) localVarPathParams.Add("lookupListName", Configuration.ApiClient.ParameterToString(lookupListName)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdLookupListByLookupListNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValuePairStringString>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValuePairStringString>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValuePairStringString>)));
            
        }

        /// <summary>
        /// Gets the lookup list entries. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="lookupListName">Name of the lookup list.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;KeyValuePairStringString&gt;</returns>
        public async System.Threading.Tasks.Task<List<KeyValuePairStringString>> ApiBaseByTypeByIdLookupListByLookupListNameGetAsync (string type, string id, string lookupListName, string authorization)
        {
             ApiResponse<List<KeyValuePairStringString>> localVarResponse = await ApiBaseByTypeByIdLookupListByLookupListNameGetAsyncWithHttpInfo(type, id, lookupListName, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the lookup list entries. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="lookupListName">Name of the lookup list.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;KeyValuePairStringString&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<KeyValuePairStringString>>> ApiBaseByTypeByIdLookupListByLookupListNameGetAsyncWithHttpInfo (string type, string id, string lookupListName, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdLookupListByLookupListNameGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdLookupListByLookupListNameGet");
            // verify the required parameter 'lookupListName' is set
            if (lookupListName == null)
                throw new ApiException(400, "Missing required parameter 'lookupListName' when calling BaseApi->ApiBaseByTypeByIdLookupListByLookupListNameGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdLookupListByLookupListNameGet");

            var localVarPath = "/_api/base/{type}/{id}/LookupList/{lookupListName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lookupListName != null) localVarPathParams.Add("lookupListName", Configuration.ApiClient.ParameterToString(lookupListName)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdLookupListByLookupListNameGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<KeyValuePairStringString>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<KeyValuePairStringString>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<KeyValuePairStringString>)));
            
        }

        /// <summary>
        /// Moves the object. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Container</returns>
        public Container ApiBaseByTypeByIdMovePost (string type, string id, string authorization, Container container = null)
        {
             ApiResponse<Container> localVarResponse = ApiBaseByTypeByIdMovePostWithHttpInfo(type, id, authorization, container);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Moves the object. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiBaseByTypeByIdMovePostWithHttpInfo (string type, string id, string authorization, Container container = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdMovePost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdMovePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdMovePost");

            var localVarPath = "/_api/base/{type}/{id}/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (container != null && container.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(container); // http body (model) parameter
            }
            else
            {
                localVarPostBody = container; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdMovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Moves the object. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdMovePostAsync (string type, string id, string authorization, Container container = null)
        {
             ApiResponse<Container> localVarResponse = await ApiBaseByTypeByIdMovePostAsyncWithHttpInfo(type, id, authorization, container);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Moves the object. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="container">The container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdMovePostAsyncWithHttpInfo (string type, string id, string authorization, Container container = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdMovePost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdMovePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdMovePost");

            var localVarPath = "/_api/base/{type}/{id}/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (container != null && container.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(container); // http body (model) parameter
            }
            else
            {
                localVarPostBody = container; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdMovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Updates the container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Container</returns>
        public Container ApiBaseByTypeByIdPost (string type, string id, string authorization, Container newContainer = null)
        {
             ApiResponse<Container> localVarResponse = ApiBaseByTypeByIdPostWithHttpInfo(type, id, authorization, newContainer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiBaseByTypeByIdPostWithHttpInfo (string type, string id, string authorization, Container newContainer = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdPost");

            var localVarPath = "/_api/base/{type}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (newContainer != null && newContainer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newContainer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newContainer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Updates the container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdPostAsync (string type, string id, string authorization, Container newContainer = null)
        {
             ApiResponse<Container> localVarResponse = await ApiBaseByTypeByIdPostAsyncWithHttpInfo(type, id, authorization, newContainer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the container. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="id">The container identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newContainer">The new container. (optional)</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdPostAsyncWithHttpInfo (string type, string id, string authorization, Container newContainer = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdPost");

            var localVarPath = "/_api/base/{type}/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (newContainer != null && newContainer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newContainer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newContainer; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Uploads the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns></returns>
        public void ApiBaseByTypeByIdUploadFilePost (string type, string id, string authorization)
        {
             ApiBaseByTypeByIdUploadFilePostWithHttpInfo(type, id, authorization);
        }

        /// <summary>
        /// Uploads the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiBaseByTypeByIdUploadFilePostWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdUploadFilePost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdUploadFilePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdUploadFilePost");

            var localVarPath = "/_api/base/{type}/{id}/UploadFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdUploadFilePost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Uploads the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBaseByTypeByIdUploadFilePostAsync (string type, string id, string authorization)
        {
             await ApiBaseByTypeByIdUploadFilePostAsyncWithHttpInfo(type, id, authorization);

        }

        /// <summary>
        /// Uploads the file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiBaseByTypeByIdUploadFilePostAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdUploadFilePost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdUploadFilePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdUploadFilePost");

            var localVarPath = "/_api/base/{type}/{id}/UploadFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdUploadFilePost", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the version by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>DocumentVersion</returns>
        public DocumentVersion ApiBaseByTypeByIdVersionsByVersionIdGet (string type, string id, string versionId, string authorization)
        {
             ApiResponse<DocumentVersion> localVarResponse = ApiBaseByTypeByIdVersionsByVersionIdGetWithHttpInfo(type, id, versionId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the version by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of DocumentVersion</returns>
        public ApiResponse< DocumentVersion > ApiBaseByTypeByIdVersionsByVersionIdGetWithHttpInfo (string type, string id, string versionId, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGet");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGet");

            var localVarPath = "/_api/base/{type}/{id}/Versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdVersionsByVersionIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVersion)));
            
        }

        /// <summary>
        /// Gets the version by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of DocumentVersion</returns>
        public async System.Threading.Tasks.Task<DocumentVersion> ApiBaseByTypeByIdVersionsByVersionIdGetAsync (string type, string id, string versionId, string authorization)
        {
             ApiResponse<DocumentVersion> localVarResponse = await ApiBaseByTypeByIdVersionsByVersionIdGetAsyncWithHttpInfo(type, id, versionId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the version by identifier. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (DocumentVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentVersion>> ApiBaseByTypeByIdVersionsByVersionIdGetAsyncWithHttpInfo (string type, string id, string versionId, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGet");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGet");

            var localVarPath = "/_api/base/{type}/{id}/Versions/{versionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdVersionsByVersionIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentVersion)));
            
        }

        /// <summary>
        /// Gets the file for version. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns></returns>
        public void ApiBaseByTypeByIdVersionsByVersionIdGetFileGet (string type, string id, string versionId, string authorization)
        {
             ApiBaseByTypeByIdVersionsByVersionIdGetFileGetWithHttpInfo(type, id, versionId, authorization);
        }

        /// <summary>
        /// Gets the file for version. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ApiBaseByTypeByIdVersionsByVersionIdGetFileGetWithHttpInfo (string type, string id, string versionId, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGetFileGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGetFileGet");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGetFileGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGetFileGet");

            var localVarPath = "/_api/base/{type}/{id}/Versions/{versionId}/GetFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdVersionsByVersionIdGetFileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the file for version. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBaseByTypeByIdVersionsByVersionIdGetFileGetAsync (string type, string id, string versionId, string authorization)
        {
             await ApiBaseByTypeByIdVersionsByVersionIdGetFileGetAsyncWithHttpInfo(type, id, versionId, authorization);

        }

        /// <summary>
        /// Gets the file for version. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApiBaseByTypeByIdVersionsByVersionIdGetFileGetAsyncWithHttpInfo (string type, string id, string versionId, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGetFileGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGetFileGet");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGetFileGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdGetFileGet");

            var localVarPath = "/_api/base/{type}/{id}/Versions/{versionId}/GetFile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdVersionsByVersionIdGetFileGet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Restores the version. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Container</returns>
        public Container ApiBaseByTypeByIdVersionsByVersionIdRestorePost (string type, string id, string versionId, string authorization)
        {
             ApiResponse<Container> localVarResponse = ApiBaseByTypeByIdVersionsByVersionIdRestorePostWithHttpInfo(type, id, versionId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restores the version. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiBaseByTypeByIdVersionsByVersionIdRestorePostWithHttpInfo (string type, string id, string versionId, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdRestorePost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdRestorePost");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdRestorePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdRestorePost");

            var localVarPath = "/_api/base/{type}/{id}/Versions/{versionId}/Restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdVersionsByVersionIdRestorePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Restores the version. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiBaseByTypeByIdVersionsByVersionIdRestorePostAsync (string type, string id, string versionId, string authorization)
        {
             ApiResponse<Container> localVarResponse = await ApiBaseByTypeByIdVersionsByVersionIdRestorePostAsyncWithHttpInfo(type, id, versionId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restores the version. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document .</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="versionId">The version identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiBaseByTypeByIdVersionsByVersionIdRestorePostAsyncWithHttpInfo (string type, string id, string versionId, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdRestorePost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdRestorePost");
            // verify the required parameter 'versionId' is set
            if (versionId == null)
                throw new ApiException(400, "Missing required parameter 'versionId' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdRestorePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdVersionsByVersionIdRestorePost");

            var localVarPath = "/_api/base/{type}/{id}/Versions/{versionId}/Restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (versionId != null) localVarPathParams.Add("versionId", Configuration.ApiClient.ParameterToString(versionId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdVersionsByVersionIdRestorePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Gets the versions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;DocumentVersion&gt;</returns>
        public List<DocumentVersion> ApiBaseByTypeByIdVersionsGet (string type, string id, string authorization)
        {
             ApiResponse<List<DocumentVersion>> localVarResponse = ApiBaseByTypeByIdVersionsGetWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the versions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;DocumentVersion&gt;</returns>
        public ApiResponse< List<DocumentVersion> > ApiBaseByTypeByIdVersionsGetWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdVersionsGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdVersionsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdVersionsGet");

            var localVarPath = "/_api/base/{type}/{id}/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdVersionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentVersion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentVersion>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentVersion>)));
            
        }

        /// <summary>
        /// Gets the versions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;DocumentVersion&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentVersion>> ApiBaseByTypeByIdVersionsGetAsync (string type, string id, string authorization)
        {
             ApiResponse<List<DocumentVersion>> localVarResponse = await ApiBaseByTypeByIdVersionsGetAsyncWithHttpInfo(type, id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the versions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the document.</param>
        /// <param name="id">The document identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentVersion&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentVersion>>> ApiBaseByTypeByIdVersionsGetAsyncWithHttpInfo (string type, string id, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeByIdVersionsGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BaseApi->ApiBaseByTypeByIdVersionsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeByIdVersionsGet");

            var localVarPath = "/_api/base/{type}/{id}/Versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeByIdVersionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentVersion>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentVersion>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentVersion>)));
            
        }

        /// <summary>
        /// Gets containers by a type. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        public List<Container> ApiBaseByTypeGet (string type, string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = ApiBaseByTypeGetWithHttpInfo(type, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets containers by a type. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        public ApiResponse< List<Container> > ApiBaseByTypeGetWithHttpInfo (string type, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeGet");

            var localVarPath = "/_api/base/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets containers by a type. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        public async System.Threading.Tasks.Task<List<Container>> ApiBaseByTypeGetAsync (string type, string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = await ApiBaseByTypeGetAsyncWithHttpInfo(type, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets containers by a type. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiBaseByTypeGetAsyncWithHttpInfo (string type, string authorization)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BaseApi->ApiBaseByTypeGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseByTypeGet");

            var localVarPath = "/_api/base/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseByTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets the root. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        public List<Container> ApiBaseRootGet (string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = ApiBaseRootGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the root. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        public ApiResponse< List<Container> > ApiBaseRootGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseRootGet");

            var localVarPath = "/_api/base/Root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseRootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets the root. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        public async System.Threading.Tasks.Task<List<Container>> ApiBaseRootGetAsync (string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = await ApiBaseRootGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the root. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiBaseRootGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseRootGet");

            var localVarPath = "/_api/base/Root";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseRootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets the container types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ApiBaseTypesGet (string authorization)
        {
             ApiResponse<List<string>> localVarResponse = ApiBaseTypesGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the container types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > ApiBaseTypesGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseTypesGet");

            var localVarPath = "/_api/base/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Gets the container types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ApiBaseTypesGetAsync (string authorization)
        {
             ApiResponse<List<string>> localVarResponse = await ApiBaseTypesGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the container types. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> ApiBaseTypesGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BaseApi->ApiBaseTypesGet");

            var localVarPath = "/_api/base/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiBaseTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

    }
}
