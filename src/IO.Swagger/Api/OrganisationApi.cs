/* 
 * Synacta
 *
 * WebApi
 *
 * OpenAPI spec version: v1
 * Contact: bhofmann@agile-is.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganisationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets the new organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Organisation</returns>
        Organisation ApiOrgByIdAddGet (string id, string authorization);

        /// <summary>
        /// Gets the new organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Organisation</returns>
        ApiResponse<Organisation> ApiOrgByIdAddGetWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Saves the new organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newOrganisation">The new organisation. (optional)</param>
        /// <returns>Organisation</returns>
        Organisation ApiOrgByIdAddPut (string id, string authorization, Organisation newOrganisation = null);

        /// <summary>
        /// Saves the new organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newOrganisation">The new organisation. (optional)</param>
        /// <returns>ApiResponse of Organisation</returns>
        ApiResponse<Organisation> ApiOrgByIdAddPutWithHttpInfo (string id, string authorization, Organisation newOrganisation = null);
        /// <summary>
        /// Gets all containers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        List<Container> ApiOrgByIdByTypeGet (string id, string type, string authorization);

        /// <summary>
        /// Gets all containers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        ApiResponse<List<Container>> ApiOrgByIdByTypeGetWithHttpInfo (string id, string type, string authorization);
        /// <summary>
        /// Gets the child organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Organisation&gt;</returns>
        List<Organisation> ApiOrgByIdChildrenGet (string id, string authorization);

        /// <summary>
        /// Gets the child organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Organisation&gt;</returns>
        ApiResponse<List<Organisation>> ApiOrgByIdChildrenGetWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Deletes the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>bool?</returns>
        bool? ApiOrgByIdDelete (string id, string authorization);

        /// <summary>
        /// Deletes the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ApiOrgByIdDeleteWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Gets the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Organisation</returns>
        Organisation ApiOrgByIdGet (string id, string authorization);

        /// <summary>
        /// Gets the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Organisation</returns>
        ApiResponse<Organisation> ApiOrgByIdGetWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Moves the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="organisation">The organisation. (optional)</param>
        /// <returns>Organisation</returns>
        Organisation ApiOrgByIdMovePost (string id, string authorization, Organisation organisation = null);

        /// <summary>
        /// Moves the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="organisation">The organisation. (optional)</param>
        /// <returns>ApiResponse of Organisation</returns>
        ApiResponse<Organisation> ApiOrgByIdMovePostWithHttpInfo (string id, string authorization, Organisation organisation = null);
        /// <summary>
        /// Updates the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="pOrganisation">The organisation. (optional)</param>
        /// <returns>Organisation</returns>
        Organisation ApiOrgByIdPost (string id, string authorization, Organisation pOrganisation = null);

        /// <summary>
        /// Updates the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="pOrganisation">The organisation. (optional)</param>
        /// <returns>ApiResponse of Organisation</returns>
        ApiResponse<Organisation> ApiOrgByIdPostWithHttpInfo (string id, string authorization, Organisation pOrganisation = null);
        /// <summary>
        /// Gets the recycle bin entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>RecycleBinEntry</returns>
        RecycleBinEntry ApiOrgByIdRecycleBinByRecycleBinIdGet (string id, string recycleBinId, string authorization);

        /// <summary>
        /// Gets the recycle bin entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of RecycleBinEntry</returns>
        ApiResponse<RecycleBinEntry> ApiOrgByIdRecycleBinByRecycleBinIdGetWithHttpInfo (string id, string recycleBinId, string authorization);
        /// <summary>
        /// Restores the recycle bin entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle bin identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Container</returns>
        Container ApiOrgByIdRecycleBinByRecycleBinIdRestorePost (string id, string recycleBinId, string authorization);

        /// <summary>
        /// Restores the recycle bin entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle bin identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Container</returns>
        ApiResponse<Container> ApiOrgByIdRecycleBinByRecycleBinIdRestorePostWithHttpInfo (string id, string recycleBinId, string authorization);
        /// <summary>
        /// Gets the recycle bin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;RecycleBinEntry&gt;</returns>
        List<RecycleBinEntry> ApiOrgByIdRecycleBinGet (string id, string authorization);

        /// <summary>
        /// Gets the recycle bin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;RecycleBinEntry&gt;</returns>
        ApiResponse<List<RecycleBinEntry>> ApiOrgByIdRecycleBinGetWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Gets all organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Organisation&gt;</returns>
        List<Organisation> ApiOrgGet (string authorization);

        /// <summary>
        /// Gets all organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Organisation&gt;</returns>
        ApiResponse<List<Organisation>> ApiOrgGetWithHttpInfo (string authorization);
        /// <summary>
        /// Gets all organisations with childs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Organisation&gt;</returns>
        List<Organisation> ApiOrgOrgTreeGet (string authorization);

        /// <summary>
        /// Gets all organisations with childs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Organisation&gt;</returns>
        ApiResponse<List<Organisation>> ApiOrgOrgTreeGetWithHttpInfo (string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets the new organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Organisation</returns>
        System.Threading.Tasks.Task<Organisation> ApiOrgByIdAddGetAsync (string id, string authorization);

        /// <summary>
        /// Gets the new organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdAddGetAsyncWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Saves the new organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newOrganisation">The new organisation. (optional)</param>
        /// <returns>Task of Organisation</returns>
        System.Threading.Tasks.Task<Organisation> ApiOrgByIdAddPutAsync (string id, string authorization, Organisation newOrganisation = null);

        /// <summary>
        /// Saves the new organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newOrganisation">The new organisation. (optional)</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdAddPutAsyncWithHttpInfo (string id, string authorization, Organisation newOrganisation = null);
        /// <summary>
        /// Gets all containers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        System.Threading.Tasks.Task<List<Container>> ApiOrgByIdByTypeGetAsync (string id, string type, string authorization);

        /// <summary>
        /// Gets all containers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiOrgByIdByTypeGetAsyncWithHttpInfo (string id, string type, string authorization);
        /// <summary>
        /// Gets the child organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Organisation&gt;</returns>
        System.Threading.Tasks.Task<List<Organisation>> ApiOrgByIdChildrenGetAsync (string id, string authorization);

        /// <summary>
        /// Gets the child organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Organisation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organisation>>> ApiOrgByIdChildrenGetAsyncWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Deletes the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ApiOrgByIdDeleteAsync (string id, string authorization);

        /// <summary>
        /// Deletes the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ApiOrgByIdDeleteAsyncWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Gets the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Organisation</returns>
        System.Threading.Tasks.Task<Organisation> ApiOrgByIdGetAsync (string id, string authorization);

        /// <summary>
        /// Gets the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdGetAsyncWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Moves the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="organisation">The organisation. (optional)</param>
        /// <returns>Task of Organisation</returns>
        System.Threading.Tasks.Task<Organisation> ApiOrgByIdMovePostAsync (string id, string authorization, Organisation organisation = null);

        /// <summary>
        /// Moves the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="organisation">The organisation. (optional)</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdMovePostAsyncWithHttpInfo (string id, string authorization, Organisation organisation = null);
        /// <summary>
        /// Updates the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="pOrganisation">The organisation. (optional)</param>
        /// <returns>Task of Organisation</returns>
        System.Threading.Tasks.Task<Organisation> ApiOrgByIdPostAsync (string id, string authorization, Organisation pOrganisation = null);

        /// <summary>
        /// Updates the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="pOrganisation">The organisation. (optional)</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdPostAsyncWithHttpInfo (string id, string authorization, Organisation pOrganisation = null);
        /// <summary>
        /// Gets the recycle bin entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of RecycleBinEntry</returns>
        System.Threading.Tasks.Task<RecycleBinEntry> ApiOrgByIdRecycleBinByRecycleBinIdGetAsync (string id, string recycleBinId, string authorization);

        /// <summary>
        /// Gets the recycle bin entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (RecycleBinEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<RecycleBinEntry>> ApiOrgByIdRecycleBinByRecycleBinIdGetAsyncWithHttpInfo (string id, string recycleBinId, string authorization);
        /// <summary>
        /// Restores the recycle bin entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle bin identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Container</returns>
        System.Threading.Tasks.Task<Container> ApiOrgByIdRecycleBinByRecycleBinIdRestorePostAsync (string id, string recycleBinId, string authorization);

        /// <summary>
        /// Restores the recycle bin entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle bin identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        System.Threading.Tasks.Task<ApiResponse<Container>> ApiOrgByIdRecycleBinByRecycleBinIdRestorePostAsyncWithHttpInfo (string id, string recycleBinId, string authorization);
        /// <summary>
        /// Gets the recycle bin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;RecycleBinEntry&gt;</returns>
        System.Threading.Tasks.Task<List<RecycleBinEntry>> ApiOrgByIdRecycleBinGetAsync (string id, string authorization);

        /// <summary>
        /// Gets the recycle bin.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;RecycleBinEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RecycleBinEntry>>> ApiOrgByIdRecycleBinGetAsyncWithHttpInfo (string id, string authorization);
        /// <summary>
        /// Gets all organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Organisation&gt;</returns>
        System.Threading.Tasks.Task<List<Organisation>> ApiOrgGetAsync (string authorization);

        /// <summary>
        /// Gets all organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Organisation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organisation>>> ApiOrgGetAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Gets all organisations with childs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Organisation&gt;</returns>
        System.Threading.Tasks.Task<List<Organisation>> ApiOrgOrgTreeGetAsync (string authorization);

        /// <summary>
        /// Gets all organisations with childs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Organisation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Organisation>>> ApiOrgOrgTreeGetAsyncWithHttpInfo (string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganisationApi : IOrganisationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganisationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganisationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets the new organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Organisation</returns>
        public Organisation ApiOrgByIdAddGet (string id, string authorization)
        {
             ApiResponse<Organisation> localVarResponse = ApiOrgByIdAddGetWithHttpInfo(id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the new organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Organisation</returns>
        public ApiResponse< Organisation > ApiOrgByIdAddGetWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdAddGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdAddGet");

            var localVarPath = "/_api/org/{id}/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdAddGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Gets the new organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Organisation</returns>
        public async System.Threading.Tasks.Task<Organisation> ApiOrgByIdAddGetAsync (string id, string authorization)
        {
             ApiResponse<Organisation> localVarResponse = await ApiOrgByIdAddGetAsyncWithHttpInfo(id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the new organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdAddGetAsyncWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdAddGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdAddGet");

            var localVarPath = "/_api/org/{id}/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdAddGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Saves the new organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newOrganisation">The new organisation. (optional)</param>
        /// <returns>Organisation</returns>
        public Organisation ApiOrgByIdAddPut (string id, string authorization, Organisation newOrganisation = null)
        {
             ApiResponse<Organisation> localVarResponse = ApiOrgByIdAddPutWithHttpInfo(id, authorization, newOrganisation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves the new organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newOrganisation">The new organisation. (optional)</param>
        /// <returns>ApiResponse of Organisation</returns>
        public ApiResponse< Organisation > ApiOrgByIdAddPutWithHttpInfo (string id, string authorization, Organisation newOrganisation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdAddPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdAddPut");

            var localVarPath = "/_api/org/{id}/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (newOrganisation != null && newOrganisation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newOrganisation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newOrganisation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Saves the new organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newOrganisation">The new organisation. (optional)</param>
        /// <returns>Task of Organisation</returns>
        public async System.Threading.Tasks.Task<Organisation> ApiOrgByIdAddPutAsync (string id, string authorization, Organisation newOrganisation = null)
        {
             ApiResponse<Organisation> localVarResponse = await ApiOrgByIdAddPutAsyncWithHttpInfo(id, authorization, newOrganisation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves the new organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="newOrganisation">The new organisation. (optional)</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdAddPutAsyncWithHttpInfo (string id, string authorization, Organisation newOrganisation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdAddPut");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdAddPut");

            var localVarPath = "/_api/org/{id}/Add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (newOrganisation != null && newOrganisation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(newOrganisation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newOrganisation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdAddPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Gets all containers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Container&gt;</returns>
        public List<Container> ApiOrgByIdByTypeGet (string id, string type, string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = ApiOrgByIdByTypeGetWithHttpInfo(id, type, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all containers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Container&gt;</returns>
        public ApiResponse< List<Container> > ApiOrgByIdByTypeGetWithHttpInfo (string id, string type, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdByTypeGet");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling OrganisationApi->ApiOrgByIdByTypeGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdByTypeGet");

            var localVarPath = "/_api/org/{id}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdByTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets all containers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Container&gt;</returns>
        public async System.Threading.Tasks.Task<List<Container>> ApiOrgByIdByTypeGetAsync (string id, string type, string authorization)
        {
             ApiResponse<List<Container>> localVarResponse = await ApiOrgByIdByTypeGetAsyncWithHttpInfo(id, type, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all containers. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="type">Type of the container.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Container&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Container>>> ApiOrgByIdByTypeGetAsyncWithHttpInfo (string id, string type, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdByTypeGet");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling OrganisationApi->ApiOrgByIdByTypeGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdByTypeGet");

            var localVarPath = "/_api/org/{id}/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdByTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Container>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Container>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Container>)));
            
        }

        /// <summary>
        /// Gets the child organisations. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Organisation&gt;</returns>
        public List<Organisation> ApiOrgByIdChildrenGet (string id, string authorization)
        {
             ApiResponse<List<Organisation>> localVarResponse = ApiOrgByIdChildrenGetWithHttpInfo(id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the child organisations. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Organisation&gt;</returns>
        public ApiResponse< List<Organisation> > ApiOrgByIdChildrenGetWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdChildrenGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdChildrenGet");

            var localVarPath = "/_api/org/{id}/Children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdChildrenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organisation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Organisation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organisation>)));
            
        }

        /// <summary>
        /// Gets the child organisations. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Organisation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organisation>> ApiOrgByIdChildrenGetAsync (string id, string authorization)
        {
             ApiResponse<List<Organisation>> localVarResponse = await ApiOrgByIdChildrenGetAsyncWithHttpInfo(id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the child organisations. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Organisation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Organisation>>> ApiOrgByIdChildrenGetAsyncWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdChildrenGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdChildrenGet");

            var localVarPath = "/_api/org/{id}/Children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdChildrenGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organisation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Organisation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organisation>)));
            
        }

        /// <summary>
        /// Deletes the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>bool?</returns>
        public bool? ApiOrgByIdDelete (string id, string authorization)
        {
             ApiResponse<bool?> localVarResponse = ApiOrgByIdDeleteWithHttpInfo(id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ApiOrgByIdDeleteWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdDelete");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdDelete");

            var localVarPath = "/_api/org/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Deletes the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ApiOrgByIdDeleteAsync (string id, string authorization)
        {
             ApiResponse<bool?> localVarResponse = await ApiOrgByIdDeleteAsyncWithHttpInfo(id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ApiOrgByIdDeleteAsyncWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdDelete");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdDelete");

            var localVarPath = "/_api/org/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Gets the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Organisation</returns>
        public Organisation ApiOrgByIdGet (string id, string authorization)
        {
             ApiResponse<Organisation> localVarResponse = ApiOrgByIdGetWithHttpInfo(id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Organisation</returns>
        public ApiResponse< Organisation > ApiOrgByIdGetWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdGet");

            var localVarPath = "/_api/org/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Gets the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Organisation</returns>
        public async System.Threading.Tasks.Task<Organisation> ApiOrgByIdGetAsync (string id, string authorization)
        {
             ApiResponse<Organisation> localVarResponse = await ApiOrgByIdGetAsyncWithHttpInfo(id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdGetAsyncWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdGet");

            var localVarPath = "/_api/org/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Moves the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="organisation">The organisation. (optional)</param>
        /// <returns>Organisation</returns>
        public Organisation ApiOrgByIdMovePost (string id, string authorization, Organisation organisation = null)
        {
             ApiResponse<Organisation> localVarResponse = ApiOrgByIdMovePostWithHttpInfo(id, authorization, organisation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Moves the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="organisation">The organisation. (optional)</param>
        /// <returns>ApiResponse of Organisation</returns>
        public ApiResponse< Organisation > ApiOrgByIdMovePostWithHttpInfo (string id, string authorization, Organisation organisation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdMovePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdMovePost");

            var localVarPath = "/_api/org/{id}/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (organisation != null && organisation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(organisation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organisation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdMovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Moves the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="organisation">The organisation. (optional)</param>
        /// <returns>Task of Organisation</returns>
        public async System.Threading.Tasks.Task<Organisation> ApiOrgByIdMovePostAsync (string id, string authorization, Organisation organisation = null)
        {
             ApiResponse<Organisation> localVarResponse = await ApiOrgByIdMovePostAsyncWithHttpInfo(id, authorization, organisation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Moves the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="organisation">The organisation. (optional)</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdMovePostAsyncWithHttpInfo (string id, string authorization, Organisation organisation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdMovePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdMovePost");

            var localVarPath = "/_api/org/{id}/Move";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (organisation != null && organisation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(organisation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organisation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdMovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Updates the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="pOrganisation">The organisation. (optional)</param>
        /// <returns>Organisation</returns>
        public Organisation ApiOrgByIdPost (string id, string authorization, Organisation pOrganisation = null)
        {
             ApiResponse<Organisation> localVarResponse = ApiOrgByIdPostWithHttpInfo(id, authorization, pOrganisation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="pOrganisation">The organisation. (optional)</param>
        /// <returns>ApiResponse of Organisation</returns>
        public ApiResponse< Organisation > ApiOrgByIdPostWithHttpInfo (string id, string authorization, Organisation pOrganisation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdPost");

            var localVarPath = "/_api/org/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (pOrganisation != null && pOrganisation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pOrganisation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pOrganisation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Updates the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="pOrganisation">The organisation. (optional)</param>
        /// <returns>Task of Organisation</returns>
        public async System.Threading.Tasks.Task<Organisation> ApiOrgByIdPostAsync (string id, string authorization, Organisation pOrganisation = null)
        {
             ApiResponse<Organisation> localVarResponse = await ApiOrgByIdPostAsyncWithHttpInfo(id, authorization, pOrganisation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the organisation. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <param name="pOrganisation">The organisation. (optional)</param>
        /// <returns>Task of ApiResponse (Organisation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organisation>> ApiOrgByIdPostAsyncWithHttpInfo (string id, string authorization, Organisation pOrganisation = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdPost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdPost");

            var localVarPath = "/_api/org/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (pOrganisation != null && pOrganisation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(pOrganisation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pOrganisation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Organisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organisation)));
            
        }

        /// <summary>
        /// Gets the recycle bin entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>RecycleBinEntry</returns>
        public RecycleBinEntry ApiOrgByIdRecycleBinByRecycleBinIdGet (string id, string recycleBinId, string authorization)
        {
             ApiResponse<RecycleBinEntry> localVarResponse = ApiOrgByIdRecycleBinByRecycleBinIdGetWithHttpInfo(id, recycleBinId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the recycle bin entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of RecycleBinEntry</returns>
        public ApiResponse< RecycleBinEntry > ApiOrgByIdRecycleBinByRecycleBinIdGetWithHttpInfo (string id, string recycleBinId, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdGet");
            // verify the required parameter 'recycleBinId' is set
            if (recycleBinId == null)
                throw new ApiException(400, "Missing required parameter 'recycleBinId' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdGet");

            var localVarPath = "/_api/org/{id}/RecycleBin/{recycleBinId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (recycleBinId != null) localVarPathParams.Add("recycleBinId", Configuration.ApiClient.ParameterToString(recycleBinId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdRecycleBinByRecycleBinIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecycleBinEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecycleBinEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecycleBinEntry)));
            
        }

        /// <summary>
        /// Gets the recycle bin entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of RecycleBinEntry</returns>
        public async System.Threading.Tasks.Task<RecycleBinEntry> ApiOrgByIdRecycleBinByRecycleBinIdGetAsync (string id, string recycleBinId, string authorization)
        {
             ApiResponse<RecycleBinEntry> localVarResponse = await ApiOrgByIdRecycleBinByRecycleBinIdGetAsyncWithHttpInfo(id, recycleBinId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the recycle bin entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (RecycleBinEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RecycleBinEntry>> ApiOrgByIdRecycleBinByRecycleBinIdGetAsyncWithHttpInfo (string id, string recycleBinId, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdGet");
            // verify the required parameter 'recycleBinId' is set
            if (recycleBinId == null)
                throw new ApiException(400, "Missing required parameter 'recycleBinId' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdGet");

            var localVarPath = "/_api/org/{id}/RecycleBin/{recycleBinId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (recycleBinId != null) localVarPathParams.Add("recycleBinId", Configuration.ApiClient.ParameterToString(recycleBinId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdRecycleBinByRecycleBinIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RecycleBinEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RecycleBinEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RecycleBinEntry)));
            
        }

        /// <summary>
        /// Restores the recycle bin entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle bin identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Container</returns>
        public Container ApiOrgByIdRecycleBinByRecycleBinIdRestorePost (string id, string recycleBinId, string authorization)
        {
             ApiResponse<Container> localVarResponse = ApiOrgByIdRecycleBinByRecycleBinIdRestorePostWithHttpInfo(id, recycleBinId, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restores the recycle bin entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle bin identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of Container</returns>
        public ApiResponse< Container > ApiOrgByIdRecycleBinByRecycleBinIdRestorePostWithHttpInfo (string id, string recycleBinId, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdRestorePost");
            // verify the required parameter 'recycleBinId' is set
            if (recycleBinId == null)
                throw new ApiException(400, "Missing required parameter 'recycleBinId' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdRestorePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdRestorePost");

            var localVarPath = "/_api/org/{id}/RecycleBin/{recycleBinId}/Restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (recycleBinId != null) localVarPathParams.Add("recycleBinId", Configuration.ApiClient.ParameterToString(recycleBinId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdRecycleBinByRecycleBinIdRestorePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Restores the recycle bin entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle bin identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of Container</returns>
        public async System.Threading.Tasks.Task<Container> ApiOrgByIdRecycleBinByRecycleBinIdRestorePostAsync (string id, string recycleBinId, string authorization)
        {
             ApiResponse<Container> localVarResponse = await ApiOrgByIdRecycleBinByRecycleBinIdRestorePostAsyncWithHttpInfo(id, recycleBinId, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restores the recycle bin entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="recycleBinId">The recycle bin identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (Container)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Container>> ApiOrgByIdRecycleBinByRecycleBinIdRestorePostAsyncWithHttpInfo (string id, string recycleBinId, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdRestorePost");
            // verify the required parameter 'recycleBinId' is set
            if (recycleBinId == null)
                throw new ApiException(400, "Missing required parameter 'recycleBinId' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdRestorePost");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdRecycleBinByRecycleBinIdRestorePost");

            var localVarPath = "/_api/org/{id}/RecycleBin/{recycleBinId}/Restore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (recycleBinId != null) localVarPathParams.Add("recycleBinId", Configuration.ApiClient.ParameterToString(recycleBinId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdRecycleBinByRecycleBinIdRestorePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Container>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Container) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Container)));
            
        }

        /// <summary>
        /// Gets the recycle bin. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;RecycleBinEntry&gt;</returns>
        public List<RecycleBinEntry> ApiOrgByIdRecycleBinGet (string id, string authorization)
        {
             ApiResponse<List<RecycleBinEntry>> localVarResponse = ApiOrgByIdRecycleBinGetWithHttpInfo(id, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the recycle bin. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;RecycleBinEntry&gt;</returns>
        public ApiResponse< List<RecycleBinEntry> > ApiOrgByIdRecycleBinGetWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdRecycleBinGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdRecycleBinGet");

            var localVarPath = "/_api/org/{id}/RecycleBin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdRecycleBinGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecycleBinEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RecycleBinEntry>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecycleBinEntry>)));
            
        }

        /// <summary>
        /// Gets the recycle bin. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;RecycleBinEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<RecycleBinEntry>> ApiOrgByIdRecycleBinGetAsync (string id, string authorization)
        {
             ApiResponse<List<RecycleBinEntry>> localVarResponse = await ApiOrgByIdRecycleBinGetAsyncWithHttpInfo(id, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the recycle bin. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The organisation identifier.</param>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;RecycleBinEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RecycleBinEntry>>> ApiOrgByIdRecycleBinGetAsyncWithHttpInfo (string id, string authorization)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OrganisationApi->ApiOrgByIdRecycleBinGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgByIdRecycleBinGet");

            var localVarPath = "/_api/org/{id}/RecycleBin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgByIdRecycleBinGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RecycleBinEntry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RecycleBinEntry>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RecycleBinEntry>)));
            
        }

        /// <summary>
        /// Gets all organisations. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Organisation&gt;</returns>
        public List<Organisation> ApiOrgGet (string authorization)
        {
             ApiResponse<List<Organisation>> localVarResponse = ApiOrgGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all organisations. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Organisation&gt;</returns>
        public ApiResponse< List<Organisation> > ApiOrgGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgGet");

            var localVarPath = "/_api/org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organisation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Organisation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organisation>)));
            
        }

        /// <summary>
        /// Gets all organisations. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Organisation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organisation>> ApiOrgGetAsync (string authorization)
        {
             ApiResponse<List<Organisation>> localVarResponse = await ApiOrgGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all organisations. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Organisation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Organisation>>> ApiOrgGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgGet");

            var localVarPath = "/_api/org";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organisation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Organisation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organisation>)));
            
        }

        /// <summary>
        /// Gets all organisations with childs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>List&lt;Organisation&gt;</returns>
        public List<Organisation> ApiOrgOrgTreeGet (string authorization)
        {
             ApiResponse<List<Organisation>> localVarResponse = ApiOrgOrgTreeGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all organisations with childs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>ApiResponse of List&lt;Organisation&gt;</returns>
        public ApiResponse< List<Organisation> > ApiOrgOrgTreeGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgOrgTreeGet");

            var localVarPath = "/_api/org/OrgTree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgOrgTreeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organisation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Organisation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organisation>)));
            
        }

        /// <summary>
        /// Gets all organisations with childs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of List&lt;Organisation&gt;</returns>
        public async System.Threading.Tasks.Task<List<Organisation>> ApiOrgOrgTreeGetAsync (string authorization)
        {
             ApiResponse<List<Organisation>> localVarResponse = await ApiOrgOrgTreeGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all organisations with childs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">access token</param>
        /// <returns>Task of ApiResponse (List&lt;Organisation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Organisation>>> ApiOrgOrgTreeGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OrganisationApi->ApiOrgOrgTreeGet");

            var localVarPath = "/_api/org/OrgTree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiOrgOrgTreeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Organisation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Organisation>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Organisation>)));
            
        }

    }
}
