/* 
 * Synacta
 *
 * WebApi
 *
 * OpenAPI spec version: v1
 * Contact: bhofmann@agile-is.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing OrganisationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class OrganisationApiTests
    {
        private OrganisationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OrganisationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrganisationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OrganisationApi
            //Assert.IsInstanceOfType(typeof(OrganisationApi), instance, "instance is a OrganisationApi");
        }

        
        /// <summary>
        /// Test ApiOrgByIdAddGet
        /// </summary>
        [Test]
        public void ApiOrgByIdAddGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //var response = instance.ApiOrgByIdAddGet(id, authorization);
            //Assert.IsInstanceOf<Organisation> (response, "response is Organisation");
        }
        
        /// <summary>
        /// Test ApiOrgByIdAddPut
        /// </summary>
        [Test]
        public void ApiOrgByIdAddPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //Organisation newOrganisation = null;
            //var response = instance.ApiOrgByIdAddPut(id, authorization, newOrganisation);
            //Assert.IsInstanceOf<Organisation> (response, "response is Organisation");
        }
        
        /// <summary>
        /// Test ApiOrgByIdByTypeGet
        /// </summary>
        [Test]
        public void ApiOrgByIdByTypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string type = null;
            //string authorization = null;
            //var response = instance.ApiOrgByIdByTypeGet(id, type, authorization);
            //Assert.IsInstanceOf<List<Container>> (response, "response is List<Container>");
        }
        
        /// <summary>
        /// Test ApiOrgByIdChildrenGet
        /// </summary>
        [Test]
        public void ApiOrgByIdChildrenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //var response = instance.ApiOrgByIdChildrenGet(id, authorization);
            //Assert.IsInstanceOf<List<Organisation>> (response, "response is List<Organisation>");
        }
        
        /// <summary>
        /// Test ApiOrgByIdDelete
        /// </summary>
        [Test]
        public void ApiOrgByIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //var response = instance.ApiOrgByIdDelete(id, authorization);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test ApiOrgByIdGet
        /// </summary>
        [Test]
        public void ApiOrgByIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //var response = instance.ApiOrgByIdGet(id, authorization);
            //Assert.IsInstanceOf<Organisation> (response, "response is Organisation");
        }
        
        /// <summary>
        /// Test ApiOrgByIdMovePost
        /// </summary>
        [Test]
        public void ApiOrgByIdMovePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //Organisation organisation = null;
            //var response = instance.ApiOrgByIdMovePost(id, authorization, organisation);
            //Assert.IsInstanceOf<Organisation> (response, "response is Organisation");
        }
        
        /// <summary>
        /// Test ApiOrgByIdPost
        /// </summary>
        [Test]
        public void ApiOrgByIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //Organisation pOrganisation = null;
            //var response = instance.ApiOrgByIdPost(id, authorization, pOrganisation);
            //Assert.IsInstanceOf<Organisation> (response, "response is Organisation");
        }
        
        /// <summary>
        /// Test ApiOrgByIdRecycleBinByRecycleBinIdGet
        /// </summary>
        [Test]
        public void ApiOrgByIdRecycleBinByRecycleBinIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string recycleBinId = null;
            //string authorization = null;
            //var response = instance.ApiOrgByIdRecycleBinByRecycleBinIdGet(id, recycleBinId, authorization);
            //Assert.IsInstanceOf<RecycleBinEntry> (response, "response is RecycleBinEntry");
        }
        
        /// <summary>
        /// Test ApiOrgByIdRecycleBinByRecycleBinIdRestorePost
        /// </summary>
        [Test]
        public void ApiOrgByIdRecycleBinByRecycleBinIdRestorePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string recycleBinId = null;
            //string authorization = null;
            //var response = instance.ApiOrgByIdRecycleBinByRecycleBinIdRestorePost(id, recycleBinId, authorization);
            //Assert.IsInstanceOf<Container> (response, "response is Container");
        }
        
        /// <summary>
        /// Test ApiOrgByIdRecycleBinGet
        /// </summary>
        [Test]
        public void ApiOrgByIdRecycleBinGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //var response = instance.ApiOrgByIdRecycleBinGet(id, authorization);
            //Assert.IsInstanceOf<List<RecycleBinEntry>> (response, "response is List<RecycleBinEntry>");
        }
        
        /// <summary>
        /// Test ApiOrgGet
        /// </summary>
        [Test]
        public void ApiOrgGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ApiOrgGet(authorization);
            //Assert.IsInstanceOf<List<Organisation>> (response, "response is List<Organisation>");
        }
        
        /// <summary>
        /// Test ApiOrgOrgTreeGet
        /// </summary>
        [Test]
        public void ApiOrgOrgTreeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ApiOrgOrgTreeGet(authorization);
            //Assert.IsInstanceOf<List<Organisation>> (response, "response is List<Organisation>");
        }
        
    }

}
