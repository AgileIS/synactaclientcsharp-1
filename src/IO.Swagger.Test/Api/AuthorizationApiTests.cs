/* 
 * Synacta
 *
 * WebApi
 *
 * OpenAPI spec version: v1
 * Contact: bhofmann@agile-is.de
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AuthorizationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AuthorizationApiTests
    {
        private AuthorizationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AuthorizationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AuthorizationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AuthorizationApi
            //Assert.IsInstanceOfType(typeof(AuthorizationApi), instance, "instance is a AuthorizationApi");
        }

        
        /// <summary>
        /// Test ApiAuthorizationPrincipalsByIdGet
        /// </summary>
        [Test]
        public void ApiAuthorizationPrincipalsByIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //var response = instance.ApiAuthorizationPrincipalsByIdGet(id, authorization);
            //Assert.IsInstanceOf<PrincipalSearchResult> (response, "response is PrincipalSearchResult");
        }
        
        /// <summary>
        /// Test ApiAuthorizationPrincipalsGet
        /// </summary>
        [Test]
        public void ApiAuthorizationPrincipalsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ApiAuthorizationPrincipalsGet(authorization);
            //Assert.IsInstanceOf<List<PrincipalSearchResult>> (response, "response is List<PrincipalSearchResult>");
        }
        
        /// <summary>
        /// Test ApiAuthorizationRightsGet
        /// </summary>
        [Test]
        public void ApiAuthorizationRightsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ApiAuthorizationRightsGet(authorization);
            //Assert.IsInstanceOf<List<Right>> (response, "response is List<Right>");
        }
        
        /// <summary>
        /// Test ApiAuthorizationRolesAddGet
        /// </summary>
        [Test]
        public void ApiAuthorizationRolesAddGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ApiAuthorizationRolesAddGet(authorization);
            //Assert.IsInstanceOf<Role> (response, "response is Role");
        }
        
        /// <summary>
        /// Test ApiAuthorizationRolesAddPut
        /// </summary>
        [Test]
        public void ApiAuthorizationRolesAddPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //Role role = null;
            //var response = instance.ApiAuthorizationRolesAddPut(authorization, role);
            //Assert.IsInstanceOf<Role> (response, "response is Role");
        }
        
        /// <summary>
        /// Test ApiAuthorizationRolesByIdDelete
        /// </summary>
        [Test]
        public void ApiAuthorizationRolesByIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //var response = instance.ApiAuthorizationRolesByIdDelete(id, authorization);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test ApiAuthorizationRolesByIdGet
        /// </summary>
        [Test]
        public void ApiAuthorizationRolesByIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //var response = instance.ApiAuthorizationRolesByIdGet(id, authorization);
            //Assert.IsInstanceOf<Role> (response, "response is Role");
        }
        
        /// <summary>
        /// Test ApiAuthorizationRolesByIdPost
        /// </summary>
        [Test]
        public void ApiAuthorizationRolesByIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string authorization = null;
            //Role role = null;
            //var response = instance.ApiAuthorizationRolesByIdPost(id, authorization, role);
            //Assert.IsInstanceOf<Role> (response, "response is Role");
        }
        
        /// <summary>
        /// Test ApiAuthorizationRolesGet
        /// </summary>
        [Test]
        public void ApiAuthorizationRolesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ApiAuthorizationRolesGet(authorization);
            //Assert.IsInstanceOf<List<Role>> (response, "response is List<Role>");
        }
        
    }

}
